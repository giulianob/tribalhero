/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Text;
using Thrift.Protocol;

[Serializable]
public class PlayerUnreadCount : TBase
{
    public Isset __isset;

    private int _id;

    private int _unreadCount;

    public int Id
    {
        get
        {
            return _id;
        }
        set
        {
            __isset.id = true;
            _id = value;
        }
    }

    public int UnreadCount
    {
        get
        {
            return _unreadCount;
        }
        set
        {
            __isset.unreadCount = true;
            _unreadCount = value;
        }
    }

    public void Read(TProtocol iprot)
    {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop)
            {
                break;
            }
            switch(field.ID)
            {
                case 1:
                    if (field.Type == TType.I32)
                    {
                        Id = iprot.ReadI32();
                    }
                    else
                    {
                        TProtocolUtil.Skip(iprot, field.Type);
                    }
                    break;
                case 2:
                    if (field.Type == TType.I32)
                    {
                        UnreadCount = iprot.ReadI32();
                    }
                    else
                    {
                        TProtocolUtil.Skip(iprot, field.Type);
                    }
                    break;
                default:
                    TProtocolUtil.Skip(iprot, field.Type);
                    break;
            }
            iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot)
    {
        TStruct struc = new TStruct("PlayerUnreadCount");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.id)
        {
            field.Name = "id";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Id);
            oprot.WriteFieldEnd();
        }
        if (__isset.unreadCount)
        {
            field.Name = "unreadCount";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(UnreadCount);
            oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
    }

    public override string ToString()
    {
        StringBuilder sb = new StringBuilder("PlayerUnreadCount(");
        sb.Append("Id: ");
        sb.Append(Id);
        sb.Append(",UnreadCount: ");
        sb.Append(UnreadCount);
        sb.Append(")");
        return sb.ToString();
    }

    [Serializable]
    public struct Isset
    {
        public bool id;

        public bool unreadCount;
    }
}